#!/usr/bin/env ruby 
################################################################################
# Contextual Analyzer v0.1.1b for Twitter Analysis Suite by Chase Higgins
################################################################################
# This script will use the wordlists generated by our get_words script to try
# and analyze the amount of positive vs negative tweets for a given subject. 
# Measuring the context of the tweet combined with the amount of tweets should
# give a nice picture of how popular a subject is on twitter. 
################################################################################
# TODO:
	# use a even list of words ie grab say 50 words and their exact antonyms
		# so that we don't artificially get too many positive/negative results 
	# use OOP style typecasting eg var.to_f instead of Float(var)
	# format output of showresults to be a table or something
################################################################################
# the search_saver script has already defined the tweet data struct so include
# it, not to mention it has DB methods as well
require 'search_saver';
# we present the option of using existing word lists or generating new ones for
# this run
if (ARGV[1] == 'get-words')
	require 'word_lists/get_words.rb';
elsif (ARGV[1] != '' && ARGV[1] != nil)
  # this will be a query word
  SUBJECT = ARGV[1].dup;
end;
# define the DB to use
DB = ARGV[0];


class TweetDB < Database
	# the DB class inherits Database functions from the search_saver script
	# and also implements a few methods and overrides of it's own
	def getTweets
		# collect the tweets from the defined database, and instantiate them all
		# into Tweet structs
		tweets = Array.new;
		sql = "
			SELECT * 
			FROM `tweets`
			ORDER BY created DESC
		";
		rows = @db.execute(sql);
		rows.each() { |row|
			# each row is an array, unfortunately the keys are numeric and not
			# named, meaning db structure changes ruin this assignment
			t = Tweet.new(
				row[0],
				row[1],
				row[2],
				row[3],
				row[4]
			);
			tweets << t;
		}
		# now we should have a list of the tweets from the DB
		return tweets;
	end; # end of getTweets method 
end; # end of DB class


class TweetAnalyzer
	# the tweet analyzer is our class to compare the archived tweets with our
	# word lists to attempt to classify the context of the tweet
	def initialize()
		# constructor for our tweet analyzer
		# first we should get a connection to the DB file, can be an existing or
		# new file, we don't care
		@db = TweetDB.new;
		if !@db.hasConnection?
			# if there is no connection to the database something went wrong, 
			# kill the script
			exit(-1);
		end;
		# if we get through this method then it looks like we had a connection
		# so let's get the tweets then
		@tweets = @db.getTweets;
		# we also need to get our word lists
		if (ARGV[1] == 'get-words')
			# we will be generating our own word list
			wl = WordList.new;
			@positives = wl.getPositive;
			@negatives = wl.getNegative;
		elsif SUBJECT
			# we will just be looking for this in each tweet instead
			compareSubject;
		else
			# we will look in the word_lists folder for the files positives.txt
			# and negatives.txt
			readWordLists;
		end;
	end; # end of constructor

	def compareSubject
		matches = 0;
		@tweets.each() { |tweet|
			# iterate tweets and find the subject
			if (tweet.content.match(SUBJECT))
				matches += 1;
			end;
		}
		@subject_matches = matches;
	end; # end of compareSubject method

	def compareTweets
		# create counters for positive/negative/neutral tweets
		positive_count = 0;
		negative_count = 0;
		neutral_count = 0;
		@tweets.each() { |tweet|
			# iterate and compare the tweets
			# first the positives
			matched = false;
			@positives.each() { |word|
				if (tweet.content.match(word))
					# we have a positive match, increment counter
					positive_count += 1;
					matched = true;
				end;
			}
			@negatives.each() { |word| 
				if (tweet.content.match(word))
					negative_count += 1;
					matched = true;
				end;
			}
			# if the matched variable is not set to true this tweet contained
			# no positive or negative indicators we could match. If this is the 
			# case then incremement the neutral counter
			neutral_count += 1 if matched != true;
		}
		# now store the counts in an instance hash
		@counts = {
			:positive => positive_count,
			:negative => negative_count,
			:neutral => neutral_count
		}
		return @counts;
	end; # end of compareTweets method

  def readWordLists

  end; # end of readWordLists method

	def calculateStats
		# take the counts from our @counts instance var and calculate the 
		# percentages of each tweet
		classified_tweets = @counts[:positive] + @counts[:negative];
		total_tweets = classified_tweets + @counts[:neutral];
		# first we will find the percentages for only classified tweets
		@percentages = {
			:class_negative => (Float(@counts[:negative]) / Float(classified_tweets)) * 100
		}
		@percentages[:class_positive] = (Float(@counts[:positive]) / Float(classified_tweets)) * 100;
		@percentages[:negative] = (Float(@counts[:negative]) / Float(total_tweets)) * 100;
		@percentages[:positive] = (Float(@counts[:positive]) / Float(total_tweets)) * 100;
		@percentages[:classified] = (Float(classified_tweets) / Float(total_tweets)) * 100;
		return @percentages;
	end; # end of getStats method

	def showResults
		# show the results to the user
		# show how many tweets we were able to classify
		puts "[+] We were able to classify the context of #{@percentages[:classified]}% of tweets";
		# do classified tweet percentages first
		puts "[+] Of tweets that were classified, #{@percentages[:class_positive]}% were determined positive";
		puts "[+] Of tweets that were classified, #{@percentages[:class_negative]}% were determined negative";
		# now give the total percentages from all tweets
		puts "[+] Of all tweets, #{@percentages[:positive]}% were determined positive";
		puts "[+] Of all tweets, #{@percentages[:negative]}% were determined negative";
	end; # end of showResults method
end; # end of TweetAnalyzer class


def main
	t = TweetAnalyzer.new;
	t.compareTweets;
	t.calculateStats;
	t.showResults;
end;

if (__FILE__ == $0) 
	main;
end;
